(function(){
    'use strict';
    
    let currentLanguages = [];
    let isTranslating = false;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç—É–ª–±–∞—Ä
    function addTranslationsButton() {
        const toolbar = document.querySelector('.topbar');
        if (!toolbar || document.getElementById('btnTranslations')) return;
        
        const langBtn = document.getElementById('btnLangs');
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.id = 'btnTranslations';
        btn.className = 'btn';
        btn.textContent = 'üåç –ü–µ—Ä–µ–≤–æ–¥—ã';
        btn.addEventListener('click', openTranslationsModal);
        
        if (langBtn && langBtn.nextSibling) {
            langBtn.parentNode.insertBefore(btn, langBtn.nextSibling);
        } else {
            toolbar.appendChild(btn);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function createModal() {
        if (document.getElementById('transModalBackdrop')) return;
        
        const backdrop = document.createElement('div');
        backdrop.id = 'transModalBackdrop';
        backdrop.className = 'trans-backdrop hidden';
        
        const modal = document.createElement('div');
        modal.className = 'trans-modal';
        
        modal.innerHTML = `
            <div class="trans-modal__header">
                <div class="trans-modal__title">üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏</div>
                <button type="button" class="trans-close">√ó</button>
            </div>
            <div class="trans-modal__body">
                <div class="trans-section">
                    <label class="trans-label">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</label>
                    <div class="trans-langs" id="transLangsList">
                        <div style="color:#6b7280">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–Ø–∑—ã–∫–∏"</div>
                    </div>
                </div>
                
                <div class="trans-section">
                    <label class="trans-label">–¢–æ–∫–µ–Ω DeepL API:</label>
                    <input type="password" class="trans-input" id="transDeeplToken" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω DeepL">
                    <div class="trans-buttons" style="margin-top:8px">
                        <button type="button" class="trans-btn" id="transSaveToken">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
                        <button type="button" class="trans-btn danger" id="transDeleteToken">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω</button>
                    </div>
                </div>
                
                <div class="trans-section">
                    <label class="trans-label">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏:</label>
                    <div class="trans-buttons">
                        <button type="button" class="trans-btn primary" id="transStartTranslate">üöÄ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã</button>
                        <button type="button" class="trans-btn danger" id="transDeleteAll">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã</button>
                    </div>
                </div>
                
                <div class="trans-section">
                    <label class="trans-label">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
                    <div class="trans-log" id="transLog">
                        <div class="trans-log-entry info">–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...</div>
                    </div>
                </div>
            </div>
        `;
        
        backdrop.appendChild(modal);
        document.body.appendChild(backdrop);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.trans-close').addEventListener('click', closeModal);
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) closeModal();
        });
        
        document.getElementById('transSaveToken').addEventListener('click', saveToken);
        document.getElementById('transDeleteToken').addEventListener('click', deleteToken);
        document.getElementById('transStartTranslate').addEventListener('click', startTranslation);
        document.getElementById('transDeleteAll').addEventListener('click', deleteAllTranslations);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
        loadToken();
    }
    
    function openTranslationsModal() {
        createModal();
        updateLanguagesList();
        document.getElementById('transModalBackdrop').classList.remove('hidden');
    }
    
    function closeModal() {
        document.getElementById('transModalBackdrop').classList.add('hidden');
    }
    
    function updateLanguagesList() {
        const container = document.getElementById('transLangsList');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ langbadge
        const langBadge = document.querySelector('.el[data-type="langbadge"]');
        if (langBadge && langBadge.dataset.langs) {
            currentLanguages = langBadge.dataset.langs.split(',').filter(Boolean);
        }
        
        if (currentLanguages.length > 0) {
            const langNames = {
                'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                'en': 'üá¨üáß English',
                'zh-Hans': 'üá®üá≥ ‰∏≠Êñá',
                'es': 'üá™üá∏ Espa√±ol',
                'fr': 'üá´üá∑ Fran√ßais',
                'de': 'üá©üá™ Deutsch',
                'it': 'üáÆüáπ Italiano',
                'pt': 'üáµüáπ Portugu√™s',
                'ja': 'üáØüáµ Êó•Êú¨Ë™û',
                'ko': 'üá∞üá∑ ÌïúÍµ≠Ïñ¥',
                'nl': 'üá≥üá± Nederlands',
                'pl': 'üáµüá± Polski',
                'tr': 'üáπüá∑ T√ºrk√ße',
                'ar': 'üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
                'cs': 'üá®üáø ƒåe≈°tina',
                'da': 'üá©üá∞ Dansk',
                'el': 'üá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨',
                'fi': 'üá´üáÆ Suomi',
                'hu': 'üá≠üá∫ Magyar',
                'id': 'üáÆüá© Indonesia',
                'no': 'üá≥üá¥ Norsk',
                'ro': 'üá∑üá¥ Rom√¢nƒÉ',
                'sv': 'üá∏üá™ Svenska',
                'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
                'bg': 'üáßüá¨ –ë—ä–ª–≥–∞—Ä—Å–∫–∏',
                'et': 'üá™üá™ Eesti',
                'lt': 'üá±üáπ Lietuvi≈≥',
                'lv': 'üá±üáª Latvie≈°u',
                'sk': 'üá∏üá∞ Slovenƒçina',
                'sl': 'üá∏üáÆ Sloven≈°ƒçina',
                'hi': 'üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'
            };
            
            container.innerHTML = currentLanguages.map(lang => 
                `<div class="trans-lang-chip ${lang === 'ru' ? 'active' : ''}">${langNames[lang] || lang}</div>`
            ).join('');
        } else {
            container.innerHTML = '<div style="color:#6b7280">–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø–∑—ã–∫–∏" –¥–ª—è –≤—ã–±–æ—Ä–∞.</div>';
        }
    }
    
    function log(message, type = 'info') {
        const logEl = document.getElementById('transLog');
        const entry = document.createElement('div');
        entry.className = `trans-log-entry ${type}`;
        entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        logEl.appendChild(entry);
        logEl.scrollTop = logEl.scrollHeight;
    }
    
    async function loadToken() {
        try {
            const response = await fetch('/editor/translations_api.php?action=getToken');
            const data = await response.json();
            if (data.ok && data.token) {
                document.getElementById('transDeeplToken').value = data.token;
                log('–¢–æ–∫–µ–Ω DeepL –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: ' + error.message, 'error');
        }
    }
    
    async function saveToken() {
        const token = document.getElementById('transDeeplToken').value.trim();
        if (!token) {
            log('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω DeepL', 'error');
            return;
        }
        
        try {
            const fd = new FormData();
            fd.append('action', 'saveToken');
            fd.append('token', token);
            
            const response = await fetch('/editor/translations_api.php', {
                method: 'POST',
                body: fd
            });
            const data = await response.json();
            
            if (data.ok) {
                log('–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
            } else {
                log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', 'error');
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    async function deleteToken() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω DeepL?')) return;
        
        try {
            const fd = new FormData();
            fd.append('action', 'deleteToken');
            
            const response = await fetch('/editor/translations_api.php', {
                method: 'POST',
                body: fd
            });
            const data = await response.json();
            
            if (data.ok) {
                document.getElementById('transDeeplToken').value = '';
                log('–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω', 'success');
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    async function startTranslation() {
        if (isTranslating) {
            log('–ü–µ—Ä–µ–≤–æ–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...', 'error');
            return;
        }
        
        if (currentLanguages.length === 0) {
            log('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–Ø–∑—ã–∫–∏"', 'error');
            return;
        }
        
        const token = document.getElementById('transDeeplToken').value.trim();
        if (!token) {
            log('–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω DeepL', 'error');
            return;
        }
        
        isTranslating = true;
        log('–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥...', 'info');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            const pagesResponse = await fetch('/editor/api.php?action=listPages');
            const pagesData = await pagesResponse.json();
            
            if (!pagesData.ok || !pagesData.pages) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü');
            }
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for (const page of pagesData.pages) {
                log(`–ü–µ—Ä–µ–≤–æ–∂—É —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.name}`, 'info');
                
                const fd = new FormData();
                fd.append('action', 'translate');
                fd.append('page_id', page.id);
                fd.append('languages', JSON.stringify(currentLanguages));
                
                const response = await fetch('/editor/translations_api.php', {
                    method: 'POST',
                    body: fd
                });
                
                const data = await response.json();
                
                if (data.ok) {
                    data.results.forEach(result => log(result, 'success'));
                } else {
                    log(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page.name}: ${data.error}`, 'error');
                }
            }
            
            log('–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
        } catch (error) {
            log('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        } finally {
            isTranslating = false;
        }
    }
    
    async function deleteAllTranslations() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –ø–µ—Ä–µ–≤–æ–¥—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) return;
        
        try {
            const fd = new FormData();
            fd.append('action', 'deleteTranslations');
            
            const response = await fetch('/editor/translations_api.php', {
                method: 'POST',
                body: fd
            });
            const data = await response.json();
            
            if (data.ok) {
                log('–í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã', 'success');
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', function() {
        addTranslationsButton();
    });
})();